# Gets a list of all directories in a directory
macro(SUBDIRLIST result curdir)
  file(GLOB children RELATIVE ${curdir} ${curdir}/*)
  set(dirlist "")

  foreach(child ${children})
    if(IS_DIRECTORY ${curdir}/${child})
      list(APPEND dirlist ${child})
    endif()
  endforeach()

  set(${result} ${dirlist})
endmacro()

# Adds all .cpp and .hpp files to the project
macro(vipra_add_all)
  file(GLOB TEMP_SOURCES *.cpp *.hpp */*.cpp */*.hpp)

  target_sources(
    ${VIPRA_PROJECT_NAME}
    PRIVATE
    ${TEMP_SOURCES}
  )
endmacro()

# Fetchs and adds a library from a given URL, or finds and adds it if no URL is provided
macro(vipra_add_library)
  set(options)
  set(oneValueArgs LIBNAME URL LINK GIT_URL GIT_TAG)
  set(multiValueArgs TURN_ON TURN_OFF)
  cmake_parse_arguments(GET_LIB "${options}" "${oneValueArgs}"
    "${multiValueArgs}" ${ARGN})

  if(NOT GET_LIB_LIBNAME)
    message(FATAL_ERROR "vipra_add_library missing LIBNAME")
  endif()

  foreach( opt IN LISTS GET_LIB_TURN_ON )
    message(STATUS "Turning ON " ${GET_LIB_LIBNAME} ": "  ${opt})
    set (${opt} ON)
  endforeach()

  foreach( opt IN LISTS GET_LIB_TURN_OFF )
    message(STATUS "Turning OFF " ${GET_LIB_LIBNAME} ": "  ${opt})
    set (${opt} ON)
  endforeach()
  
  message(STATUS "Getting " ${GET_LIB_LIBNAME})

  if(NOT GET_LIB_LINK)
      set(GET_LIB_LINK ${GET_LIB_LIBNAME})
  endif()

  if( NOT GET_LIB_URL AND NOT GET_LIB_GIT_URL )
    message(STATUS "Searching Locally")
    find_package(${GET_LIB_LIBNAME} REQUIRED)
  else()
    include(FetchContent)

    if ( GET_LIB_GIT_URL )
      message(STATUS "Fetching From Git " ${GET_LIB_GIT_URL} ":" ${GET_LIB_GIT_TAG})
      FetchContent_Declare(${GET_LIB_LIBNAME} GIT_REPOSITORY ${GET_LIB_GIT_URL} GIT_TAG ${GET_LIB_GIT_TAG})
    else()
      message(STATUS "Fetching From URL " ${GET_LIB_URL})
      FetchContent_Declare(${GET_LIB_LIBNAME} URL ${GET_LIB_URL})
    endif()
    
    FetchContent_MakeAvailable(${GET_LIB_LIBNAME})
    FetchContent_GetProperties(${GET_LIB_LIBNAME})

    if(NOT ${GET_LIB_LIBNAME}_POPULATED)
      message(FATAL_ERROR "Unable to Get " ${GET_LIB_LIBNAME})
    endif()

  endif()

  target_link_libraries(
    ${VIPRA_PROJECT_NAME}
    PUBLIC
    ${GET_LIB_LINK}
  )
  message(STATUS "Done Getting " ${GET_LIB_LIBNAME})
endmacro()